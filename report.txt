Backend:

We modulize the backend and put all quantum circuit evaluation functions into "Operators.elm".
We implemented the basic Single Qubit Quantum gates (Pauli-X, Pauli-Z, Hadamard). 
And we combine any two of them to form some of the 2 qubit quantum gates.
We also implemented Controlled-Not Gate, Controlled-Z Gate and Controlled-Hadamard Gate.

We then extend this to 3-Qubit Gates, combining any 3 of the single qubit gates, or a combination of single qubit gate on top of 2 Qubit Controlled Gates.
Due to time constraint, we do not support double Control Gate like Toffoli Gate at the moment.
So we more or less reached the maximum amount of freedom we planned for the users to have over designing their quantum circuits.

The interface is to take in an array of string tuples from the frontend model, translate it into a list of Matrix that represents the unitary operations quantum gate have on the qubits, 
and recursively doing matrix multiplication to get the result.

A 2 Qubit gate that is a combination of single qubit gates is taking the tensor product of the two single qubit gate matrices. 
We didn't implement the tensor product in general but we implement a direct computation taking two 2*2 matrices and compute their tensor product (a 4*4 matrix).

A 3 Qubit gate is represented by an 8*8 matrix, which is the tensor product of three 2*2 matrices representing the single qubit gates, or the tensor product between 4*4 (representing certain Control gates) and 2*2 matrices.

Special Thanks to Paul's feedback: Originally (in part2 submission) we have done this using compound typing in elm and the code was quite lengthy and complicated. We were not in the mood to temper with Matrix multiplication and Tensor Product in elm, but Paul suggested we could give it a try and we end up with the solution we have now.

Due to the nature of functional programming and the non-existence of tensor product library, the Elm language isn't the best friend of Tensor product after all. So, I have to do some unholy 64 entries matrix by hand, and do so multiple times for edge cases.
The result is rewarding though, as we allow a great deal of freedom for the user to build their own 2 or 3 Qubit Quantum Circuit.

Frontend:
We separate different pages of the interactive website into different modules. We added a parameter named page in our model to control the page the user is on. We have developed the following three pages:

1. Introduction page. The introduction page is to let users know what this application is and what we are trying to show.

2. Circuit page(s). This is where the users can actually get to build their own circuit and put in values they're interested in and run the circuit. We will talk about its functionality later in the report.

3. Instruction page. This page is mainly used to teach users how to use our application, including how to modify user input, how to check if a circuit is correctly designed, how to run checked circuits.

As the main goal of this application is to allow users to design and run 2D and 3D circuits as freely as they want, we choose to fuse documentation/instructions with interactive circuits. Due to the heavy scientific nature of this application, the simulation of quantum circuit is in its own module as the backend(Operators.elm). Our main module "Homepage.elm" is basically calling from that Operators module to retrieve outputs. 

Inside the circuit page, we successfully managed to present to users different states of the circuit by changing variables in the model. We have three states for the webpage (3 pages) and three status for the circuit (checked, run, neither checked nor run). In order to return correct input, we have also developed a few sanity check functions and "checklist feature" that ensure user inputs are correct before they are passed on to the Operators module.

Another thing we have accomplished is that we have experimented different interaction schemes and finally ended up with the current one. This is really laborious work because we first started off controlling the circuit using keyboard input. But we realized that this might not be the best way for users to interact and therefore, we change to mouse click. After clicking a certain location (picture) in the circuit picture, the application would expand several option gates for users to choose from.

A lot of the front-end design depends on css and html and we used a great number of libraries in these field (e.g. html.styled, Css, etc.). Some of them are really useful in styling elements but they often came into type conflicts with each other. For example, Attribute type could be from different libraries and therefore, could not be used togeter. Also, some of the libraries are poorly documented and don't have any usage examples. These definitely cost us more time in understanding how things worked and how we can utilize the library in our own application design.

To build:
after installing packages, do:
```
elm make Homepage.elm
```
and index.html would be the result to view.
Currently index.html and picture folder are included so you don't have to build.